@page "{id}"
@model RazorWebApp.Pages.PayModel
@{
}

<h1>Pending payment @Model.PaymentIntent.Id</h1>

@if(Model.PaymentIntent.Status == "succeeded")
{
    <h4>Payment already completed</h4>
}
else
{
    <form method="post" id="payment-form">
        <div id="payment-element">
            <!-- Elements will create form elements here -->
        </div>
        <button class="btn btn-primary" id="submit">Pay</button>
        <div id="error-message">
            <!-- Display error message to your customers here -->
        </div>
    </form>
}


@section Scripts
    {
    <script>
        const stripe = Stripe('pk_test_51IQViRJUAL06t0UN6YknkpmCTZ0OrwCvJopru0HD5GRm7UgTIKszzMbcT63FY7X5rkHZrqFfwdGLahRkv3tibA9Z00QpQrBOlP');

        const options = {
            clientSecret: '@Model.PaymentIntent.ClientSecret',
            // Fully customizable with appearance API.
            appearance: {/*...*/ },
        };

        // Set up Stripe.js and Elements to use in checkout form, passing the client secret obtained in step 5
        const elements = stripe.elements(options);

        // Create and mount the Payment Element
        const paymentElement = elements.create('payment');
        paymentElement.mount('#payment-element');


        const form = document.getElementById('payment-form');

        form.addEventListener('submit', async (event) => {
            event.preventDefault();

            const { error } = await stripe.confirmPayment({
                //`Elements` instance that was used to create the Payment Element
                elements,
                confirmParams: {
                    return_url: '@Url.PageLink("Success")',
                }
            });

            if (error) {
                // This point will only be reached if there is an immediate error when
                // confirming the payment. Show error to your customer (for example, payment
                // details incomplete)
                const messageContainer = document.querySelector('#error-message');
                messageContainer.textContent = error.message;
            } else {
                // Your customer will be redirected to your `return_url`. For some payment
                // methods like iDEAL, your customer will be redirected to an intermediate
                // site first to authorize the payment, then redirected to the `return_url`.
            }
        });
    </script>
}
